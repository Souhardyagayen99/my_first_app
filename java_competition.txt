
import java.util.Scanner;
public class Solution2 {
    public static void main(String args[]) {
     Scanner s=new Scanner(System.in);
     int n=s.nextInt();
     int i=1;
     while(i<=n){
         int j=1;
         while(j<=i){
             System.out.print('*');
             j=j+1;
         }
         System.out.println();
         i=i+1;
     }
    }
}

/*

Code : Triangular Star Pattern
Send Feedback
Print the following pattern for the given N number of rows.
Pattern for N = 4
*
**
***
****
Note : There are no spaces between the stars (*).
Input format :
Integer N (Total no. of rows)
Output format :
Pattern in N lines
Constraints
0 <= N <= 50
Sample Input 1:
5
Sample Output 1:
*
**
***
****
*****
Sample Input 2:
6
Sample Output 2:
*
**
***
****
*****
******

*/
---------------------------------------------
import java.util.*;
public class Power_of_no{
      public static void main(String [] args)
       {
          Scanner s=new Scanner(System.in);
          int n=s.nextInt();
          int x=s.nextInt();
          int p=1;
          for(int i=1;i<=x;i++)
          {
               p=p*n;
          }
          System.out.println(p);
          
       }
}

/*
Find power of a number
Send Feedback
Write a program to find x to the power n (i.e. x^n). Take x and n from the user. You need to print the answer.
Note : For this question, you can assume that 0 raised to the power of 0 is 1


Input format :
Two integers x and n (separated by space)
Output Format :
x^n (i.e. x raise to the power n)
Constraints:
0 <= x <= 8 
0 <= n <= 9
Sample Input 1 :
 3 4
Sample Output 1 :
81
Sample Input 2 :
 2 5
Sample Output 2 :
32
*/
----------------------------------------
import java.util.Scanner;
public class Sum_of_even_odd 
{	
	public static void main(String[] args) 
	{
		Scanner s = new Scanner(System.in);
		int num=s.nextInt();
		int digit;
		int ev=0,odd=0;
		while(num>0)
		{
			digit=num%10;
			num=num/10;
			if(digit%2!=0)
				odd=odd+digit;
			else
				ev=ev+digit;
		}
		System.out.print(ev+" "+odd);
	}
}

/*

Sum of even & odd
Send Feedback
Write a program to input an integer N and print the sum of all its even digits and sum of all its odd digits separately.
Digits mean numbers, not the places! That is, if the given integer is "13245", even digits are 2 & 4 and odd digits are 1, 3 & 5.
Input format :
 Integer N
Output format :
Sum_of_Even_Digits Sum_of_Odd_Digits
(Print first even sum and then odd sum separated by space)
Constraints
0 <= N <= 10^8
Sample Input 1:
1234
Sample Output 1:
6 4
Sample Input 2:
552245
Sample Output 2:
8 15
Explanation for Input 2:
For the given input, the even digits are 2, 2 and 4 and if we take the sum of these digits it will come out to be 8(2 + 2 + 4) and 
similarly, if we look at the odd digits, they are, 5, 5 and 5 which makes a sum of 15(5 + 5 + 5). 
Hence the answer would be, 8(evenSum) <single space> 15(oddSum)

*/

------------------------------------------------
import java.util.Scanner;
public class Solution4 {
    public static void main(String args[]) {
     Scanner s=new Scanner(System.in);
     int n=s.nextInt();
     int i=1;
     while(i<=n){
         int j=i;
         while(j>=1){
             System.out.print(j);
             j=j-1;
         }
         System.out.println();
         i=i+1;
     }
    }
}

/*
Code : Reverse Number Pattern
Send Feedback
Print the following pattern for the given N number of rows.
Pattern for N = 4
1
21
321
4321
Input format :
Integer N (Total no. of rows)
Output format :
Pattern in N lines
Constraints
0 <= N <= 50
Sample Input 1:
5
Sample Output 1:
1
21
321
4321
54321
Sample Input 2:
6
Sample Output 2:
1
21
321
4321
54321
654321
*/
-------------------------
/*
Reverse of a number
Send Feedback
Write a program to generate the reverse of a given number N. Print the corresponding reverse number.
Note : If a number has trailing zeros, then its reverse will not include them. For e.g., reverse of 10400 will be 401 instead of 00401.


Input format :
Integer N
Output format :
Corresponding reverse number
Constraints:
0 <= N < 10^8
Sample Input 1 :
1234
Sample Output 1 :
4321
Sample Input 2 :
1980
Sample Output 2 :
891
*/

import java.util.Scanner;
public class Solution4 {
    
    static int revers(int n) 
    { 
        int rn = 0; 
        while(n > 0) 
        { 
            rn = rn * 10 + n% 10; 
            n = n/ 10; 
        } 
        return rn; 
    } 
      
    public static void main (String[] args)  
    { 
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt(); 
        System.out.println(revers(n)); 
    } 
    

	}
------------------------------------------

Fibonacci Series Generator
📝 Problem:
Write a program to print the first n terms of the Fibonacci series.

📚 Concepts: Loops, conditionals
⏱ Time Limit: 12 minutes

🧪 Test Case 1
Input: 5
Output: 0 1 1 2 3

🧪 Test Case 2
Input: 8
Output: 0 1 1 2 3 5 8 13

💻 Code:


import java.util.Scanner;

public class FibonacciSeries {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int a = 0, b = 1;
        for (int i = 0; i < n; i++) {
            System.out.print(a + " ");
            int next = a + b;
            a = b;
            b = next;
        }
    }
}


-----------------------------
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Solution {

	public static int sum(int[] input){
        int n=input.length;
        int i,s=0;
        for(i=0;i<n;i++)
            s=s+input[i];
        return s;


	}
	

    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

    public static int[] takeInput() throws IOException {
        int size = Integer.parseInt(br.readLine().trim());
        int[] input = new int[size];

        if (size == 0) {
            return input;
        }
        
        String[] strNums; 
        strNums = br.readLine().trim().split("\\s");
        

        for (int i = 0; i < size; ++i) {
            input[i] = Integer.parseInt(strNums[i]);
        }

        return input;
    }


    public static void main(String[] args) throws NumberFormatException, IOException {
        int t = Integer.parseInt(br.readLine().trim());

        while(t > 0) {
            int[] input = takeInput();
            System.out.println(sum(input));
            t -= 1;
        }
    }
}



/*
Return Array Sum
Send Feedback
Given an array/list(ARR) of length N, you need to find and return the sum of all the elements in the array/list.
Input Format :
The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow.

The first line of each test case or query contains an integer 'N' representing the size of the array/list.

Second line contains 'N' single space separated integers representing the elements in the array/list.
Output Format :
For each test case, print the sum of the numbers in the array/list.

Output for every test case will be printed in a separate line.
Constraints :
1 <= t <= 10^2
0 <= N <= 10^5

Time Limit: 1sec
Sample Input 1:
1
3
9 8 9
Sample Output 1:
26
Sample Input 2:
2
5
1 2 3 4 5 
3
10 20 30 
Sample Output 2:
15
60
*/
-------------------------------------
📝 Problem:
Write a Java program to check whether a number is prime.

📚 Concepts: Loops, boolean logic
⏱ Time Limit: 10 minutes

🧪 Test Case 1:
Input: 7
Output: Prime

🧪 Test Case 2:
Input: 18
Output: Composite


import java.util.Scanner;

public class CheckPrime {

public static void main (String[] args) {
    Scanner s=new Scanner (System.in);
    int n=s.nextInt();
    boolean isprime=true;
    if(n%2==0)
        isprime=false;
    int i=3;
    while(isprime&&i<n)
    {
        isprime=!(n%i==0);
        i+=2;
    }
    if(isprime)
    {
        System.out.println("Prime");
    }
    else
    {
        System.out.println("Composite");
    }

}
}

----------------------------------------
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Solution {

	public static int countWords(String str) {	
		//Your code goes here
		int noOfWords = 0;
		int j=str.length();
		for(int i = 0;i < j;i++) {
			if(str.charAt(i) == ' ')
				noOfWords++;
		}
		/*
		if (j == 0) {
         
		 return noOfWords;
		}
		noOfWords += 1;
		return noOfWords;
		*/
         if (j != 0) {
         noOfWords += 1;
		}
		
		return noOfWords;

	}
	
static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

	public static void main(String[] args) throws NumberFormatException, IOException {
		String str = br.readLine();
		if (str != null) {
			str = str.trim();
		} else {
			str = "";
		}

		int count = countWords(str);
		System.out.println(count);
	}
}
/*
Count Words
Send Feedback
For a given input string(str), find and return the total number of words present in it.
It is assumed that two words will have only a single space in between. Also, there wouldn't be any leading and trailing spaces in the given input string.
Input Format:
The first and only line of input contains a string without any leading and trailing spaces.
Output Format:
The only line of output prints an integer value denoting the tool number of words present in the string.
Note:
You are not required to print anything. It has already been taken care of.
Constraints:
0 <= N <= 10^6
Where N is the length of the input string.

Time Limit: 1 sec
Sample Input 1:
Coding Ninjas!
Sample Output 1:
2
Sample Input 2:
this is a sample string
Sample Output 2:
5
*/
--------------------------------------------
Factorial of Large Numbers
📝 Problem:
Calculate the factorial of a large number (e.g., 50, 99).

📚 Concepts: Looping, BigInteger class
⏱ Time Limit: 12 minutes

🧪 Test Case 1:
Input: 10
Output: 3628800

🧪 Test Case 2:
Input: 20
Output: 2432902008176640000

Code:

import java.math.BigInteger;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        //System.out.print("Enter a number: ");
        int num = scanner.nextInt();
        
        BigInteger factorial = BigInteger.ONE;

        for (int i = 1; i <= num; i++) {
            factorial = factorial.multiply(BigInteger.valueOf(i));
        }

        System.out.println(factorial);
    }
}
-------------------------------------
###################################   EXTRA    ##################################
---------------------------------
✅ Q1. Even or Odd Checker
📝 Problem:
Write a Java program to input an integer and check whether it is even or odd.

📚 Concepts: Basic input/output, conditionals
⏱ Time Limit: 10 minutes

🧪 Test Case 1
Input: 4
Output: Even

🧪 Test Case 2
Input: 9
Output: Odd

💻 Code:

import java.util.Scanner;

public class EvenOddChecker {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        if (n % 2 == 0)
            System.out.println("Even");
        else
            System.out.println("Odd");
    }
}
-----------------------------------------------
✅ Q2. Simple Calculator
📝 Problem:
Build a calculator that performs addition, subtraction, multiplication, or division on two numbers entered by the user.

📚 Concepts: Switch-case, user input
⏱ Time Limit: 12 minutes

🧪 Test Case 1
Input:

diff
Copy
Edit
5  
3  
+  
Output: 8

🧪 Test Case 2
Input:

Copy
Edit
10  
2  
/  
Output: 5

💻 Code:

import java.util.Scanner;

public class SimpleCalculator {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        char op = sc.next().charAt(0);
        int result;

        switch (op) {
            case '+': result = a + b; break;
            case '-': result = a - b; break;
            case '*': result = a * b; break;
            case '/': result = b != 0 ? a / b : 0; break;
            default: result = 0; break;
        }

        System.out.println(result);
    }
}
----------------------------------------------------
✅ Q3. Palindrome Checker
📝 Problem:
Check if a given string (e.g., "madam") is a palindrome.

📚 Concepts: Strings, loops
⏱ Time Limit: 15 minutes

🧪 Test Case 1
Input: madam
Output: Palindrome

🧪 Test Case 2
Input: apple
Output: Not Palindrome

💻 Code:

import java.util.Scanner;

public class PalindromeChecker {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String str = sc.nextLine();
        boolean isPalindrome = true;

        for (int i = 0; i < str.length() / 2; i++) {
            if (str.charAt(i) != str.charAt(str.length() - i - 1)) {
                isPalindrome = false;
                break;
            }
        }

        if (isPalindrome)
            System.out.println("Palindrome");
        else
            System.out.println("Not Palindrome");
    }
}
--------------------------------------------
✅ Q4. Find the Second Largest in an Array
📝 Problem:
Given an array of n integers, find the second largest element.

📚 Concepts: Arrays, logic building
⏱ Time Limit: 15 minutes

🧪 Test Case 1
Input:

Copy
Edit
5  
3 9 1 6 4  
Output: 6

🧪 Test Case 2
Input:

Copy
Edit
6  
12 45 7 45 23 10  
Output: 23

💻 Code:

import java.util.Scanner;

public class SecondLargest {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        int largest = Integer.MIN_VALUE;
        int second = Integer.MIN_VALUE;

        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
            if (arr[i] > largest) {
                second = largest;
                largest = arr[i];
            } else if (arr[i] > second && arr[i] != largest) {
                second = arr[i];
            }
        }

        System.out.println(second);
    }
}
---------------------------------
✅ Q5. Sum of Digits
📝 Problem:
Write a Java program to calculate the sum of digits of a given number.

📚 Concepts: Loops, arithmetic operations
⏱ Time Limit: 10 minutes

🧪 Test Case 1:
Input: 1234
Output: 10
(Explanation: 1 + 2 + 3 + 4 = 10)

🧪 Test Case 2:
Input: 907
Output: 16
(Explanation: 9 + 0 + 7 = 16)

✅ Java Code:

import java.util.Scanner;

public class SumOfDigits {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a number: ");
        int num = scanner.nextInt();
        int sum = 0;

        while (num != 0) {
            int digit = num % 10;
            sum += digit;
            num /= 10;
        }

        System.out.println("Sum of digits: " + sum);
    }
}
